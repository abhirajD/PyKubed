from pykinect2 import PyKinectV2
from pykinect2.PyKinectV2 import *
from pykinect2 import PyKinectRuntime
from matplotlib import pyplot as plt
import math
import scipy
import numpy as np
import cv2
import pygame


# colors for drawing different bodies 
SKELETON_COLORS = [pygame.color.THECOLORS["red"], 
                  pygame.color.THECOLORS["blue"], 
                  pygame.color.THECOLORS["green"], 
                  pygame.color.THECOLORS["orange"], 
                  pygame.color.THECOLORS["purple"], 
                  pygame.color.THECOLORS["yellow"], 
                  pygame.color.THECOLORS["violet"]]


class HandGestureObjectClass(object):
    def __init__(self):
        
        # Kinect runtime object, we want only color and body frames 
        self._kinect = PyKinectRuntime.PyKinectRuntime(PyKinectV2.FrameSourceTypes_Depth | PyKinectV2.FrameSourceTypes_Body)

       
        # here we will store skeleton data 
        self._bodies = None


    def subimage(self,image, centre, theta, width, height):
        output_image = cv.CreateImage((width, height), image.depth, image.nChannels)
        mapping = np.array([[np.cos(theta), -np.sin(theta), centre[0]],[np.sin(theta), np.cos(theta), centre[1]]])
        map_matrix_cv = cv.fromarray(mapping)
        cv.GetQuadrangleSubPix(image, output_image, map_matrix_cv)
        return output_image

    
    def run(self):
        print_frame=None

        # -------- Main Program Loop -----------
        while (True):

            # --- Main event loop
           
            if self._kinect.has_new_depth_frame() or self._kinect.has_new_body_frame():
                #print ':IN_RUN:depth_frame received'

                depth_frame = self._kinect.get_last_depth_frame()
                print_frame = 32*depth_frame.reshape(424,512)                

            
                self._bodies = self._kinect.get_last_body_frame()

                # --- draw skeletons to _frame_surface
                if self._bodies is not None:
                   # print ':IN_RUN:body received'     
                    for i in range(0, self._kinect.max_body_count):
                        body = self._bodies.bodies[i]
                        if not body.is_tracked: 
                            continue 
                        
                        joints = body.joints 
                        # convert joint coordinates to color space 
                        joint_points = self._kinect.body_joints_to_depth_space(joints)
                       # print ':'
                        rx=joint_points[PyKinectV2.JointType_HandRight].x
                        ry=joint_points[PyKinectV2.JointType_HandRight].y
                        lx=joint_points[PyKinectV2.JointType_HandLeft].x
                        ly=joint_points[PyKinectV2.JointType_HandLeft].y
                        rx=math.floor(rx)
                        ry=math.floor(ry)
                        lx=math.floor(lx)
                        ly=math.floor(ly)
                        print_frame=cv2.circle(print_frame,(int(rx),int(ry)), 10,(255,0,0),5)
                        print_frame=cv2.circle(print_frame,(int(lx),int(ly)), 10,(255,0,0),5)
                        figure=cv2.imread('last1.png')
                        imgray1=cv2.cvtColor(figure,cv2.COLOR_BGR2GRAY)
                        ret1,thresh1=cv2.threshold(imgray1,127,255,0)
                        #print 'apnawala'+str(type(figure2))
                        im2, contours, hierarchy = cv2.findContours(thresh1,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
                        #print contours
                        cnt=contours[1]
                        rect = cv2.minAreaRect(cnt)
                        #print rect
                        angle=rect[2]
                        width,height=rect[1]
                        #print angle
                        box = cv2.boxPoints(rect)
                        box = np.int0(box)
                        figure1=cv2.drawContours(figure,[box],0,(0,0,255),2)
                        figure2=cv2.drawContours(figure,[cnt],0, (0,255,0), 1)
                        cv2.imshow('figure1',figure1)
                        cv2.imshow('figure2',figure2)
                        #patch = self.subimage(figure,rect[0],angle,width,height)
                        #cv.SaveImage('patch.jpg', patch)
                        M = cv2.getRotationMatrix2D(rect[0],angle,1)
                        dst = cv2.warpAffine(figure,M,(424,512))
                        cv2.imshow('figure3',dst)
                #if print_frame != None:

                   # cv2.imshow('Depthimage',print_frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break


            # --- Limit to 60 frames per second
           

        # Close our Kinect sensor, close the window and quit.
        self._kinect.close()



HandGestureObject = HandGestureObjectClass();
HandGestureObject.run();
