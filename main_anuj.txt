from pykinect2 import PyKinectV2

from pykinect2.PyKinectV2 import *

from pykinect2 import PyKinectRuntime

from matplotlib import pyplot as plt

from PIL import Image 

from skimage import data

from skimage.filters import threshold_otsu, threshold_adaptive

import scipy

import ctypes

import _ctypes

import pygame

import sys

import numpy

from scipy.misc import toimage

from scipy import ndimage 

import cv2

mindepth = 500

maxdepth = 65535

mapdepthtobyte = 8000/256;

 

f = open("depth_data","w+")

 

class BodyGameRuntime(object):

    def __init__(self):

        pygame.init()

 

        # Set the width and height of the screen [width, height]

        self._infoObject = pygame.display.Info()

        self._screen = pygame.display.set_mode((self._infoObject.current_w >> 1, self._infoObject.current_h >> 1), pygame.HWSURFACE|pygame.DOUBLEBUF|pygame.RESIZABLE,  8)

 

        pygame.display.set_caption("Kinect for Windows v2 Body Game")

 

        # Loop until the user clicks the close button.

        self._done = False

 

        # Used to manage how fast the screen updates

        self._clock = pygame.time.Clock()

 

        # Kinect runtime object, we want only depth and body frames

        self._kinect = PyKinectRuntime.PyKinectRuntime(PyKinectV2.FrameSourceTypes_Depth)

 

        # back buffer surface for getting Kinect depth frames,16bit depth, width and height equal to the Kinect depth frame size

        self._frame_surface = pygame.Surface((self._kinect.depth_frame_desc.Width, self._kinect.depth_frame_desc.Height), 0,  8)

        # here we will store skeleton data

        self._bodies = None

 

 

    def draw_depth_frame(self, frame, target_surface):

        target_surface.lock()

        address = self._kinect.surface_as_array(target_surface.get_buffer())



        ctypes.memmove(address, frame.ctypes.data, frame.size)

        del address

        target_surface.unlock()

 

 

    def subtract_frames(self,frame,previous_frame):

        #for i in range(0,424):
        #   for j in range(0,512):
        #       frame_foregnd=frame[i,j]-previous_frame[i,j]
        frame_foregnd = numpy.absolute(numpy.subtract(previous_frame,frame))

        # print numpy.shape(frame_foregnd)

        return frame_foregnd

 

    def max_hist_depth(self, frame):    

        #print 'FRAME_MAX = ' + str(frame.max())

        binaries = int(frame.max())

        if binaries <= 0:

            return 0

        histogram, bins = numpy.histogram(frame, bins = binaries)

        histogram = histogram.tolist(); bins = bins.tolist(); 

        histogram[0 : 1] = [0, 0]

        max_hist = bins[ histogram.index( max(histogram) ) ]

        return max_hist

    def run(self):

        previous_frame = None
        while not self._done:

            #Main event loop

            for event in pygame.event.get():        # User did something

                if event.type == pygame.QUIT:       # If user clicked close

                    self._done = True               # Flag that we are done so we exit this loop

 

                elif event.type == pygame.VIDEORESIZE: # Window Resized

                    self._screen = pygame.display.set_mode(event.dict['size'],

                                               pygame.HWSURFACE|pygame.DOUBLEBUF|pygame.RESIZABLE,  8)

                   

            # --- Game logic should go here

            # --- Getting frames and drawing  



            if self._kinect.has_new_depth_frame():
                raw_frame = self._kinect.get_last_depth_frame()
                frame = raw_frame
                if previous_frame != None:
                    frame=frame.reshape(424,512)    

                    previous_frame=previous_frame.reshape(424,512)  

                    frame_foregnd  = cv2.subtract(frame,previous_frame)                     

                    frame_denoised = scipy.ndimage.morphology.binary_erosion(frame_foregnd,iterations=3)                      

                    frame_foregnd=frame_foregnd.reshape(424,512)   

                    # for i in range(0,200):

                    #    for j in range(0,200):

                    #        frame_foregnd[i,j]=100 
                            
                    cv2.imshow('display',frame_foregnd)

                    print_frame = frame_denoised

                    print_frame >>= 8

                    print_frame = frame.astype(numpy.uint8)

                    

                    self.draw_depth_frame(print_frame, self._frame_surface)

                previous_frame=frame

 

            #Copy back buffer surface pixels to the screen, resize it if needed and keep aspect ratio

            #(screen size may be different from Kinect's depth frame size)

            h_to_w = float(self._frame_surface.get_height()) / self._frame_surface.get_width()

            target_height = int(h_to_w * self._screen.get_width())

            surface_to_draw = pygame.transform.scale(self._frame_surface, (self._screen.get_width(), target_height));

            self._screen.blit(surface_to_draw, (0,0))

            surface_to_draw = None

            pygame.display.update()

 

            # --- Go ahead and update the screen with what we've drawn.

            pygame.display.flip()

 

            # --- Limit to 60 frames per second

            self._clock.tick(60)

 

        # Close our Kinect sensor, close the window and quit.

        self._kinect.close()

        pygame.quit()

 

 

__main__ = "Kinect v2 Body Game"

game = BodyGameRuntime();

game.run();